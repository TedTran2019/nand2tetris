// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Not (in = address[0], out = notaddress0);
    // Not (in = address[1], out = notaddress1);
    // Not (in = address[2], out = notaddress2);
    // Custom3WayAnd (a = notaddress0, b = notaddress1, c = notaddress2, out = addressa);
    // Custom3WayAnd (a = address[0], b = notaddress1, c = notaddress2, out = addressb);
    // Custom3WayAnd (a = notaddress0, b = address[1], c = notaddress2, out = addressc);
    // Custom3WayAnd (a = address[0], b = address[1], c = notaddress2, out = addressd);
    // Custom3WayAnd (a = notaddress0, b = notaddress1, c = address[2], out = addresse);
    // Custom3WayAnd (a = address[0], b = notaddress1, c = address[2], out = addressf);
    // Custom3WayAnd (a = notaddress0, b = address[1], c = address[2], out = addressg);
    // Custom3WayAnd (a = address[0], b = address[1], c = address[2], out = addressh);
    // And (a = addressa, b = load, out = loada);
    // And (a = addressb, b = load, out = loadb);
    // And (a = addressc, b = load, out = loadc);
    // And (a = addressd, b = load, out = loadd);
    // And (a = addresse, b = load, out = loade);
    // And (a = addressf, b = load, out = loadf);
    // And (a = addressg, b = load, out = loadg);
    // And (a = addressh, b = load, out = loadh);
    DMux8Way (in = load, sel = address[0..2], a = loada, b = loadb, c = loadc, d = loadd, 
                                      e = loade, f = loadf, g = loadg, h = loadh);
    RAM8 (in = in, load = loada, address = address[3..5], out = a);
    RAM8 (in = in, load = loadb, address = address[3..5], out = b);
    RAM8 (in = in, load = loadc, address = address[3..5], out = c);
    RAM8 (in = in, load = loadd, address = address[3..5], out = d);
    RAM8 (in = in, load = loade, address = address[3..5], out = e);
    RAM8 (in = in, load = loadf, address = address[3..5], out = f);
    RAM8 (in = in, load = loadg, address = address[3..5], out = g);
    RAM8 (in = in, load = loadh, address = address[3..5], out = h);
    Mux8Way16 (a = a, b = b, c = c, d = d, e = e, f = f, g = g, h = h, sel = address[0..2], out = out);
}
