// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

// Holy shit, KBD and Screen are implemented for you lmao.
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    DMux4Way (in = load, sel = address[13..14], a = loadmainone, b = loadmaintwo, 
              c = loadscreen, d = loadkbd);
    Or (a = loadmainone, b = loadmaintwo, out = loadmain);
    RAM16K (in = in, load = loadmain, address = address[0..13], out = main);

    // Not (in = address[12], out = notscreenbit);
    // And (a = notscreenbit, b = loadscreen, out = loadscreentop);
    // And (a = address[12], b = loadscreen, out = loadscreenbottom);
    // RAM4K (in = in, load = loadscreentop, address = address[0..11], out = screentop);
    // RAM4K (in = in, load = loadscreenbottom, address = address[0..11], out = screenbottom);
    // Mux16 (a = screentop, b = screenbottom, sel = address[12], out = screen);
    Screen (in = in, load = loadscreen, address = address[0..12], out = screen);


    // Register (in = in, load = loadkbd, out = kbd);
    Keyboard (out = kbd);

    Mux4Way16(a = main, b = main, c = screen, d = kbd, sel = address[13..14], out = out);
}
